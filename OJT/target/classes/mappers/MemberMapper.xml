<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ojt.mapper.MemberMapper">

	<resultMap type="com.ojt.bean.MemberBean" id="memberDefaultMap">
		<id property="memberNumber" column="mem_seq"/>
		<result property="memberName" column="mem_nm"/>
		<result property="memberId" column="mem_id"/>
		<result property="memberPw" column="mem_pw"/>
		<result property="memberRrnPrefix" column="mem_rrn_prefix"/>
		<result property="memberRrnSuffix" column="mem_rrn_suffix"/>
		<result property="tel" column="mem_tel"/>
		<result property="emTel" column="mem_emtel"/>
		<result property="email" column="mem_email"/>
		<result property="genderCode" column="gd_cd"/>
		<result property="departmentCode" column="dp_cd"/>
		<result property="positionCode" column="ra_cd"/>
		<result property="zoneCode" column="mem_zonecode"/>
		<result property="address" column="mem_addr"/>
		<result property="detailAddress" column="mem_detailaddr"/>
		<result property="extraAddress" column="mem_extraaddr"/>
		<result property="pictureDir" column="mem_pic"/>
		<result property="statusCode" column="st_cd"/>
		<result property="hireDate" column="mem_hire_date"/>
		<result property="resignationDate" column="mem_resignation_date"/>
		<result property="gender" column="gender"/>
		<result property="department" column="department"/>
		<result property="position" column="position"/>
		<result property="skillString" column="skillString"/>
		<result property="skillCodeString" column="skillCodeString"/>
	</resultMap>
	
	<resultMap type="com.ojt.bean.ProjectMemberBean" id="projectMemberDefaultMap">
		<id property="memberNumber" column="mem_seq"/>
		<id property="projectNumber" column="prj_seq"/>
		<result property="projectName" column="prj_nm"/>
		<result property="customerName" column="cust_nm"/>
		<result property="memberName" column="mem_nm"/>
		<result property="startDate" column="st_dt"/>
		<result property="endDate" column="ed_dt"/>
		<result property="roleCode" column="roleCode"/>
		<result property="roleName" column="roleName"/>
	</resultMap>

	<!-- 사원 검색 -->
	<select id="searchMember" parameterType="com.ojt.bean.SearchMemberBean" resultMap="memberDefaultMap">
		select * from(
			select
				mi.mem_seq,
				mi.mem_nm,
				mc.mem_hire_date,
				de.dtl_cd_nm as department,
				ps.dtl_cd_nm as position,
				st.dtl_cd_nm as status,
				row_number() over (order by mi.mem_seq) as rn
			from member_info mi
			join member_company mc on mi.mem_seq = mc.mem_seq
			left join code_detail de on de.mst_cd='DP01' and mc.dp_cd = de.dtl_cd
			left join code_detail ps on ps.mst_cd='RA01' and mc.ra_cd = ps.dtl_cd
			left join code_detail st on st.mst_cd='ST01' and mc.st_cd = st.dtl_cd
			<where>
				<if test="memberName != ''">
					and mi.mem_nm like '%' || #{memberName} || '%'
				</if>
				<choose>
					<when test="firstDate != '' and secondDate != ''">
						and to_date(mc.mem_hire_date) between to_date(#{firstDate}) and to_date(#{secondDate})
					</when>
					<when test="firstDate != ''">
						and to_date(mc.mem_hire_date) >= to_date(#{firstDate})
					</when>
					<when test="secondDate != ''">
						and to_date(mc.mem_hire_date) => to_date(#{secondDate})
					</when>
				</choose>
				<if test="departmentCode != ''">
					and de.dtl_cd = #{departmentCode}
				</if>
				<if test="positionCode != ''">
					and ps.dtl_cd = #{positionCode}
				</if>
				<if test="statusCode != ''">
					and st.dtl_cd = #{statusCode}
				</if>
			</where>
			)
		where rn between #{startIndex} and #{endIndex}
	</select>
	
	<!-- 사원 검색 결과의 최대 갯수 -->
	<select id="searchMemberMaxCount" parameterType="com.ojt.bean.SearchMemberBean" resultType="int">
		select
			count(mi.mem_seq)
		from member_info mi
		join member_company mc on mi.mem_seq = mc.mem_seq
		left join code_detail de on de.mst_cd='DP01' and mc.dp_cd = de.dtl_cd
		left join code_detail ps on ps.mst_cd='RA01' and mc.ra_cd = ps.dtl_cd
		left join code_detail st on st.mst_cd='ST01' and mc.st_cd = st.dtl_cd
		<where>
			<if test="memberName != ''">
				and mi.mem_nm like '%' || #{memberName} || '%'
			</if>
			<choose>
				<when test="firstDate != '' and secondDate != ''">
					and to_date(mc.mem_hire_date) between to_date(#{firstDate}) and to_date(#{secondDate})
				</when>
				<when test="firstDate != ''">
					and to_date(mc.mem_hire_date) >= to_date(#{firstDate})
				</when>
				<when test="secondDate != ''">
					and to_date(mc.mem_hire_date) => to_date(#{secondDate})
				</when>
			</choose>
			<if test="departmentCode != ''">
				and de.dtl_cd = #{departmentCode}
			</if>
			<if test="positionCode != ''">
				and ps.dtl_cd = #{positionCode}
			</if>
			<if test="statusCode != ''">
				and st.dtl_cd = #{statusCode}
			</if>
		</where>
	</select>

	<!-- 사원의 상세 정보 -->
	<select id="getDetailMemberInfo" parameterType="int" resultMap="memberDefaultMap">
		select
	    	mi.mem_nm,
		    mi.mem_seq,
		    mi.mem_id,
		    mi.mem_rrn_prefix,
		    mi.mem_tel,
		    mi.mem_emTel,
		    mi.mem_email,
		    mi.gd_cd,
		    mc.mem_pic,
		    mc.mem_hire_date,
		    mc.mem_resignation_date,
		    mc.dp_cd,
		    mc.ra_cd,
		    mc.st_cd,
	 	   	ma.mem_zonecode,
		    ma.mem_addr,
		    ma.mem_detailaddr,
		    ma.mem_extraaddr,
		    dept.dtl_cd_nm as department,
		    posi.dtl_cd_nm as position,
		    st.dtl_cd_nm as status,
		    listagg(sk.dtl_cd_nm , ',') as skillString,
		    listagg(sk.dtl_cd , ',') as skillCodeString
		from member_info mi
		inner join member_company mc on mc.mem_seq = mi.mem_seq
		inner join member_address ma on ma.mem_seq = mi.mem_seq
		left join code_detail dept on dept.mst_cd = 'DP01' and dept.dtl_cd = mc.dp_cd
		left join code_detail posi on posi.mst_cd = 'RA01' and posi.dtl_cd = mc.ra_cd
		left join code_detail st on st.mst_cd = 'ST01' and st.dtl_cd = mc.st_cd
		left join member_sk ms on ms.mem_seq = mi.mem_seq
		left join code_detail sk on sk.mst_cd = 'SK01' and sk.dtl_cd = ms.sk_cd
		where mi.mem_seq = #{memberNumber}
		group by 
			mi.mem_nm, mi.mem_seq, mi.mem_id, mi.mem_rrn_prefix, mi.mem_tel,
			mi.mem_emTel, mi.mem_email, mi.gd_cd, mc.mem_pic, mc.mem_hire_date, mc.mem_resignation_date, mc.dp_cd, mc.ra_cd, mc.st_cd,
			ma.mem_zonecode, ma.mem_addr, ma.mem_detailaddr, ma.mem_extraaddr,
			dept.dtl_cd_nm, posi.dtl_cd_nm, st.dtl_cd_nm
	</select>
	
	<!-- 사원이 참여중이 프로젝트 리스트 -->
	<select id="getMemberProject" parameterType="int" resultMap="projectMemberDefaultMap">
		select
		    prj.prj_seq,
		    prj.prj_nm,
		    cust.cust_nm,
		    mem.st_dt,
		    mem.ed_dt,
		    ro.dtl_cd_nm as roleName
		from project_member_table mem
		inner join project_info prj on mem.prj_seq = prj.prj_seq
		inner join customer cust on prj.cust_seq = cust.cust_seq
		left join code_detail ro on ro.mst_cd = 'RO01' and ro.dtl_cd = mem.ro_cd
		where mem_seq = #{memberNumber}
	</select>
	
	<!-- 사원 보유기술 -->
	
	<!-- 사원 아이디 중복확인 -->
	<select id="checkMemberId" parameterType="String" resultType="int">
		select
			count(mem_seq)
		from member_info
		where mem_id = #{memberId}
	</select>
	
	<!-- 시퀀스 값을 가져옴 -->
	<select id="getNextMemberSequence" resultType="int">
		select MEMBER_SEQUENCE.nextval from dual
	</select>
	
	<!-- 멤버 등록 -->
	<insert id="addMember" parameterType="com.ojt.bean.MemberBean">
		insert into member_info(
			mem_seq,
			mem_nm,
			mem_id,
			mem_pw,
			mem_rrn_prefix,
			mem_rrn_suffix,
			mem_tel,
			mem_emtel,
			mem_email,
			gd_cd
		)
		values(
			#{memberNumber},
			#{memberName},
			#{memberId},
			#{memberPW},
			#{memberRrnPrefix},
			#{memberRrnSuffix},
			#{tel},
			#{emTel},
			#{email},
			#{genderCode}
		)
	</insert>
	<insert id="addMemberAddress" parameterType="com.ojt.bean.MemberBean">
		insert into member_address(
			mem_seq,
			mem_zonecode,
			mem_addr,
			mem_detailaddr,
			mem_extraaddr
		)
		values(
			#{memberNumber},
			#{zoneCode},
			#{address},
			#{detailAddress},
			#{extraAddress}
		)
	</insert>
	<insert id="addMemberCompany" parameterType="com.ojt.bean.MemberBean">
		insert into member_company(
			mem_seq,
			dp_cd,
			ra_cd,
			mem_pic,
			st_cd,
			mem_hire_date,
			mem_resignation_date
		)
		values(
			#{memberNumber},
			#{departmentCode},
			#{positionCode},
			#{pictureDir},
			#{statusCode},
			#{hireDate},
			#{resignationDate}
		)
	</insert>
	<insert id="addMemberSkill">
		insert into member_sk(
			mem_seq,
			sk_cd
		)
		values(
			#{memberNumber},
			#{skillCode}
		)
	</insert>
	
	<!-- 해당기술이 전부 존재하는지 -->
	<select id="hasSkills" parameterType="java.util.ArrayList" resultType="int">
		select count(dtl_cd)
		from code_detail
		where mst_cd = 'SK01'
			and dtl_cd in(
			<foreach item="skill" collection="skills" separator=",">
				#{skill}
			</foreach>
			)
	</select>
</mapper>